// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction


// Example: instruction 2 in CPU.tst
// 1110 1100 0001 0000
// |1| |0|    | 1| | 1| | 0| | 0| | 0| | 0|    | 0| | 1| | 0|    | 0| | 0| | 0|
// |i| |a|    |c1| |c2| |c3| |c4| |c5| |c6|    |d1| |d2| |d3|    |j1| |j2| |j3|


    PARTS:

    // Control bit 'i'
    // 0 = A instruction, 1 = C instruction
    Mux16(a=instruction, b=ALUin, sel=instruction[15], out=m1);

    ARegister(in=m1, load=AregLoad, out=Areg, out[0..14]=addressM);
    // Always load instruction in ARegister if (i == 0), else look at 'd1' for load value
    Mux(a=true, b=instruction[5], sel=instruction[15], out=AregLoad);

    DRegister(in=ALUin, load=DregLoad, out=Dreg);
    // Never load anything in DRegister if (i == 0), else look at 'd2' for load value
    Mux(a=false, b=instruction[4], sel=instruction[15], out=DregLoad);

    // Control bit 'a', ALU operates on 0->A / 1->M
    Mux16(a=Areg, b=inM, sel=instruction[12], out=m2);

    // Control bits 'c{num}' for ALU,
    // c1:zx, c2:nx, c3:zy, c4:ny, c5:f, c6:no
    ALU(x=Dreg, y=m2,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=ALUin, out=ALUout,
        zr=isZero, ng=isNegative);

    // Output Aregister if (i == 0), else output ALU's output
    Mux16(a=Areg, b=ALUout, sel=instruction[15], out=outM);

    // Control bit 'd3', controls if 'outM' is written into memory
    // We use an 'And' here because we don't want to write anything if (i == 0)
    And(a=instruction[3], b=instruction[15], out=writeM);

    // Check if control bit 'j3' is allowed to jump
    And(a=instruction[2], b=isNegative, out=a1);
    // Check if control bit 'j2' is allowed to jump
    And(a=instruction[1], b=isZero, out=a2);

    // Check if control bit 'j1' is allowed to jump
    // ALU's output is a positive number only if (ng == 0) and (zr == 0)
    Or(a=isNegative, b=isZero, out=ngORzr);
    Not(in=ngORzr, out=positive);
    And(a=instruction[0], b=positive, out=a3);

    // If one of our checks passed their test, then we know we can jump
    Or(a=a1, b=a2, out=o1);
    Or(a=o1, b=a3, out=doJump);

    // Do not load into PC if (i == 0), else look at 'o2'
    Mux(a=false, b=doJump, sel=instruction[15], out=PCLoad);

    PC(in=Areg, load=PCLoad, inc=true, reset=reset, out[0..14]=pc);
}
